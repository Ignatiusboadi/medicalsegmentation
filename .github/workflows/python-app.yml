# name: DVC Pull from GCS

# on:
#   push:
#     branches:
#       - main  # Trigger on push to the 'main' branch
#   pull_request:
#     branches:
#       - main  # Trigger on pull request to the 'main' branch

# jobs:
#   dvc-pull:
#     runs-on: ubuntu-latest

#     steps:
#       # Checkout the repository
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       # Set up Python to use DVC
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.12'  # Specify the Python version required for your project

#       # Install DVC with GCS support
#       - name: Install DVC with GCS support
#         run: |
#           python -m pip install --upgrade pip
#           pip install dvc[gs]  # Install DVC with Google Cloud Storage support

#       # Authenticate with Google Cloud using the service account key
#       - name: Set up Google Cloud credentials
#         env:
#           GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#         run: |
#           echo $GOOGLE_APPLICATION_CREDENTIALS > /tmp/gcloud-service-key.json
#           gcloud auth activate-service-account --key-file=/tmp/gcloud-service-key.json
#           gcloud config set project focus-surfer-435213-g6

#       - name: Set up environment variables
#         env:
#           MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
#           MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
#           MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
#           # MLFLOW_TRACKING_TOKEN: ${{ secrets.MLFLOW_TRACKING_TOKEN }}
#         run: |
#           echo "Environment variables set"
          
#       # # Configure the DVC remote to use Google Cloud Storage (GCS)
#       # - name: Configure DVC Remote
#       #   run: |
#       #     dvc remote add -d myremote gs://your-bucket-name/path  # Change this to your GCS bucket path
#       #     dvc remote modify myremote credentialpath /tmp/gcloud-service-key.json

#       # Fetch the metadata and pull the data from the GCS bucket using DVC
#       - name: DVC Fetch and Pull
#         run: |
#           dvc remote list
#           dvc remote modify brain_remote credentialpath /tmp/gcloud-service-key.json
#           dvc pull -v -f

#       - name: Model Retraining
#         run: |
#           pip install -r requirements.txt
#           python model_training.py


#       # Optional: Clean up the temporary Google Cloud credentials file
#       - name: Clean up credentials
#         run: rm /tmp/gcloud-service-key.json

name: 'Build and Deploy to Cloud Run'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: 'image-segmentation-438322' 
  NAME: 'image-segmentation-repo'
  REGION: 'us-central1' 
  SERVICE: 'image-segmentation-app' 
  LOCATION: 'us-central1'
  
jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

  
      -  name: 'Authenticate to Google Cloud'
         id: 'auth'
         uses: 'google-github-actions/auth@v2'
         with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      -  name: 'Docker Auth'
         run: |-
           gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev"

      - name: 'Build and Push Container'
        run: |-
          docker build -t "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.NAME }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.NAME }}/${{ env.SERVICE }}:${{ github.sha }}"
      
      # - name: 'Deploy to Cloud Run'
      #   id: deploy
      #   uses: 'google-github-actions/deploy-cloudrun@v2'
      #   with:
      #     service: '${{ env.SERVICE }}'
      #     region: '${{ env.REGION }}'
      #     image: "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.NAME }}/${{ env.SERVICE }}:${{ github.sha }}"
      #     port: 8000
      -  name: 'Deploy to Cloud Run'
         run:  |
           gcloud run deploy image-segmentation-app \
            --image "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.NAME }}/${{ env.SERVICE }}:${{ github.sha }}" \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated
     
      - name: 'Show output'
        run: echo ${{ steps.deploy.outputs.url }}